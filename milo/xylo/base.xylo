exports.translate = function(self: table, x: number|undefined|null, y: number|undefined|null)
    self.x = self.x + (x or 0)
    self.y = self.y + (y or 0)
end

exports.scale = function(self: table, x: number|undefined|null, y: number|undefined|null)
    self.xScale = self.xScale + (x or 0)
    self.yScale = self.yScale + (y or 0)
end

exports.rotate = function(self: table, angle: number|undefined|null)
    self.angle = self.angle + (angle or 0)
    self.angle = self.angle % 360
end

exports.setColor = function(self: table, r: number|undefined|null, g: number|undefined|null, b: number|undefined|null, a: number|undefined|null)
    r = milo.defaultNumber(r, 1)
    g = milo.defaultNumber(g, 1)
    b = milo.defaultNumber(b, 1)
    a = milo.defaultNumber(a, 1)
    self.color[0] = r
    self.color[1] = g
    self.color[2] = b
    self.color[3] = a
end

exports.toFront = function(self: table)
    local group: table = self.group
    for i=0, len(group.obj)-1 do
        if group.obj[i] == self then
            table.remove(group.obj, i)
            break
        end
    end
    table.insert(group.obj, self)
end

exports.toBack = function(self: table)
    local group: table = self.group
    for i=0, len(group.obj)-1 do
        if group.obj[i] == self then
            table.remove(group.obj, i)
            break
        end
    end
    table.insert(group.obj, 0, self)
end

exports.moveToGroup = function(self: table, newGroup: table)
    local group: table = self.group
    for i=0, len(group.obj)-1 do
        if group.obj[i] == self then
            table.remove(group.obj, i)
            break
        end
    end
    table.insert(newGroup.obj, self)
end

exports.addEvent = function(self: table, type: string, listener: function)
    switch type
        case "touch":
            milo.__click.new(self, listener)
        case "key":
            milo.__key.new(self, listener)
        case "update":
            milo.__update.new(self, listener)
        case "collision":
            if not self.world then
                error("Object "..self .. " is not body found")
            end
            self.world:addCollision(self, listener)
        default: error("Event no support")
    end
end

exports.removeEvent = function(self: table, type: string, listener: function)
end